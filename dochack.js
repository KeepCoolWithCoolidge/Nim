/* Generated by the Nim Compiler v1.1.1 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI43032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI195058 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI46462 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI197570 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI83448 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83444 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83432 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83428 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83416 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83412 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83404 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83400 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83396 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83388 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83384 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83380 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83372 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI83205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI83283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI83281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI83227 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI83565 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI83563 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI83561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI83231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI83229 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI85305 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI46450 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46458 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI43006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI62156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI46408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46514 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI43016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI43040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI43042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI46508 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI46426 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46428 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46446 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI46446 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46446.node = NNI46446;
var NNI46442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46442.node = NNI46442;
var NNI46428 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46428.node = NNI46428;
NTI46508.base = NTI46426;
NTI46514.base = NTI46426;
var NNI46426 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI46508, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI43042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI43040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI43040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI43016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI46514, name: "up", sons: null}]};
NTI46426.node = NNI46426;
var NNI46408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46408.node = NNI46408;
NTI46426.base = NTI46408;
NTI46428.base = NTI46426;
NTI46442.base = NTI46428;
NTI46446.base = NTI46442;
var NNI62156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI43042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI43006, name: "Field1", sons: null}]};
NTI62156.node = NNI62156;
var NNI46458 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46458.node = NNI46458;
NTI46458.base = NTI46428;
var NNI46450 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46450.node = NNI46450;
NTI46450.base = NTI46428;
NTI83561.base = NTI83229;
NTI83563.base = NTI83229;
NTI83565.base = NTI83229;
var NNI83227 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI83227, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI83227, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI83227, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI83227, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI83227, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI83227, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI83227, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI83227, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI83227, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI83227, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI83227, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI83227, name: "NotationNode", len: 0, sons: null}}};
NTI83227.node = NNI83227;
var NNI83283 = {kind: 2, len: 92, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI43042, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI43042, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI43042, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI43042, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI43042, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI43042, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI43042, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI43042, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI43042, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI43042, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI43042, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI43042, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI43042, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI43042, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI43042, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI43042, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI43042, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI43042, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI43042, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI43042, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI43042, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI43042, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI43042, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI43042, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI43042, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI43042, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI43042, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI43042, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI43042, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI43042, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI43042, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI43042, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI43042, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI43042, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI43042, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI43042, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI43042, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI43042, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI43042, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI43042, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI43042, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI43042, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI43042, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI43042, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI43042, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI43042, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI43042, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI43042, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI43042, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI43042, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI43042, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI43042, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI43042, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI43042, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI43042, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI43042, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI43042, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI43042, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI43042, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI43042, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI43042, name: "opacity", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI43042, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI43042, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI43042, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI43042, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI43042, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI43042, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI43042, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI43042, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI43042, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI43042, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI43042, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI43042, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI43042, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI43042, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI43042, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI43042, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI43042, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI43042, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI43042, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI43042, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI43042, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI43042, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI43042, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI43042, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI43042, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI43042, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI43042, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI43042, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI43042, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI43042, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI43006, name: "zIndex", sons: null}]};
NTI83283.node = NNI83283;
NTI83283.base = NTI46408;
NTI83281.base = NTI83283;
var NNI83231 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI83561, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI83563, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI83565, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI43042, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI83229, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI83229, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI83229, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI43042, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI83227, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI43042, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI83229, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI83229, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI43042, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI83281, name: "style", sons: null}]};
NTI83231.node = NNI83231;
var NNI83205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI83372, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI83376, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI83380, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI83384, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI83388, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI83392, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI83396, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI83400, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI83404, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI83408, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI83412, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI83416, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI83420, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI83424, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI83428, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI83432, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI83436, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI83440, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI83444, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI83448, name: "onunload", sons: null}]};
NTI83205.node = NNI83205;
NTI83205.base = NTI46408;
NTI83231.base = NTI83205;
NTI83229.base = NTI83231;
NTI85305.base = NTI83229;
NTI197570.base = NTI43042;
var NNI46462 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46462.node = NNI46462;
NTI46462.base = NTI46428;
var NNI195058 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI43006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI43032, name: "Field1", sons: null}]};
NTI195058.node = NNI195058;

function makeNimstrLit(c_64270) {
      var ln = c_64270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_64270.charCodeAt(i);
  }
  return result;
  

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_65827, src_65828, ti_65829) {
  var result_66019 = null;

    switch (ti_65829.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_65801(ti_65829))) {
      result_66019 = src_65828;
      }
      else {
        result_66019 = [src_65828[0], src_65828[1]];
      }
      
      break;
    case 19:
            if (dest_65827 === null || dest_65827 === undefined) {
        dest_65827 = {};
      }
      else {
        for (var key in dest_65827) { delete dest_65827[key]; }
      }
      for (var key in src_65828) { dest_65827[key] = src_65828[key]; }
      result_66019 = dest_65827;
    
      break;
    case 18:
    case 17:
      if (!((ti_65829.base == null))) {
      result_66019 = nimCopy(dest_65827, src_65828, ti_65829.base);
      }
      else {
      if ((ti_65829.kind == 17)) {
      result_66019 = (dest_65827 === null || dest_65827 === undefined) ? {m_type: ti_65829} : dest_65827;
      }
      else {
        result_66019 = (dest_65827 === null || dest_65827 === undefined) ? {} : dest_65827;
      }
      }
      nimCopyAux(result_66019, src_65828, ti_65829.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_65828 === null) {
        result_66019 = null;
      }
      else {
        if (dest_65827 === null || dest_65827 === undefined) {
          dest_65827 = new Array(src_65828.length);
        }
        else {
          dest_65827.length = src_65828.length;
        }
        result_66019 = dest_65827;
        for (var i = 0; i < src_65828.length; ++i) {
          result_66019[i] = nimCopy(result_66019[i], src_65828[i], ti_65829.base);
        }
      }
    
      break;
    case 28:
            if (src_65828 !== null) {
        result_66019 = src_65828.slice(0);
      }
    
      break;
    default: 
      result_66019 = src_65828;
      break;
    }

  return result_66019;

}

function arrayConstr(len_66086, value_66087, typ_66088) {
        var result = new Array(len_66086);
    for (var i = 0; i < len_66086; ++i) result[i] = nimCopy(null, value_66087, typ_66088);
    return result;
  

  
}

function cstrToNimstr(c_64287) {
      var ln = c_64287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_64287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_64287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function toJSStr(s_64304) {
                    var Tmp5;
            var Tmp7;

  var result_64305 = null;

    var res_64378 = new_seq_64336((s_64304 != null ? s_64304.length : 0));
    var i_64380 = 0;
    var j_64382 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_64380 < (s_64304 != null ? s_64304.length : 0))) break L2;
          var c_64383 = s_64304[i_64380];
          if ((c_64383 < 128)) {
          res_64378[j_64382] = String.fromCharCode(c_64383);
          i_64380 += 1;
          }
          else {
            var helper_64406 = new_seq_64336(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_64407 = c_64383.toString(16);
                  if (((code_64407 != null ? code_64407.length : 0) == 1)) {
                  if (helper_64406 != null) { helper_64406.push("%0"); } else { helper_64406 = ["%0"]; };
                  }
                  else {
                  if (helper_64406 != null) { helper_64406.push("%"); } else { helper_64406 = ["%"]; };
                  }
                  
                  if (helper_64406 != null) { helper_64406.push(code_64407); } else { helper_64406 = [code_64407]; };
                  i_64380 += 1;
                    if (((s_64304 != null ? s_64304.length : 0) <= i_64380)) Tmp5 = true; else {                      Tmp5 = (s_64304[i_64380] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_64383 = s_64304[i_64380];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_64378[j_64382] = decodeURIComponent(helper_64406.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_64378[j_64382] = helper_64406.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_64382 += 1;
        }
    } while(false);
    if (res_64378 === null) res_64378 = [];
               if (res_64378.length < j_64382) { for (var i=res_64378.length;i<j_64382;++i) res_64378.push(null); }
               else { res_64378.length = j_64382; };
    result_64305 = res_64378.join("");

  return result_64305;

}

function raiseException(e_62618, ename_62619) {
    e_62618.name = ename_62619;
    if ((excHandler == 0)) {
    unhandledException(e_62618);
    }
    
    e_62618.trace = nimCopy(null, raw_write_stack_trace_62481(), NTI43040);
    throw e_62618;

  
}

function addInt(a_64803, b_64804) {
        var result = a_64803 + b_64804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}

function chckIndx(i_66105, a_66106, b_66107) {
      var Tmp1;

  var result_66108 = 0;

  BeforeRet: do {
      if (!(a_66106 <= i_66105)) Tmp1 = false; else {        Tmp1 = (i_66105 <= b_66107);      }    if (Tmp1) {
    result_66108 = i_66105;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_66105, a_66106, b_66107);
    }
    
  } while (false);

  return result_66108;

}

function subInt(a_64821, b_64822) {
        var result = a_64821 - b_64822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_66124, a_66125, b_66126) {
      var Tmp1;

  var result_66127 = 0;

  BeforeRet: do {
      if (!(a_66125 <= i_66124)) Tmp1 = false; else {        Tmp1 = (i_66124 <= b_66126);      }    if (Tmp1) {
    result_66127 = i_66124;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_66127;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);

function mulInt(a_64839, b_64840) {
        var result = a_64839 * b_64840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_65221, b_65222) {
    var Tmp1;

  var result_65223 = 0;

  BeforeRet: do {
    if ((b_65222 <= a_65221)) {
    Tmp1 = a_65221;
    }
    else {
    Tmp1 = b_65222;
    }
    
    result_65223 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_65223;

}

function nimMin(a_65203, b_65204) {
    var Tmp1;

  var result_65205 = 0;

  BeforeRet: do {
    if ((a_65203 <= b_65204)) {
    Tmp1 = a_65203;
    }
    else {
    Tmp1 = b_65204;
    }
    
    result_65205 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_65205;

}
var nim_program_result = 0;
var global_raise_hook_59818 = [null];
var local_raise_hook_59823 = [null];
var out_of_mem_hook_59826 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var alternative_197319 = [null];

function is_fat_pointer_65801(ti_65803) {
  var result_65804 = false;

  BeforeRet: do {
    result_65804 = !((ConstSet1[ti_65803.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_65804;

}

function nimCopyAux(dest_65832, src_65833, n_65835) {
    switch (n_65835.kind) {
    case 0:
      break;
    case 1:
            dest_65832[n_65835.offset] = nimCopy(dest_65832[n_65835.offset], src_65833[n_65835.offset], n_65835.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_65835.sons.length; i++) {
      nimCopyAux(dest_65832, src_65833, n_65835.sons[i]);
    }
    
      break;
    case 3:
            dest_65832[n_65835.offset] = nimCopy(dest_65832[n_65835.offset], src_65833[n_65835.offset], n_65835.typ);
      for (var i = 0; i < n_65835.sons.length; ++i) {
        nimCopyAux(dest_65832, src_65833, n_65835.sons[i][1]);
      }
    
      break;
    }

  
}

function add_59838(x_59841, x_59841_Idx, y_59842) {
          if (x_59841[x_59841_Idx] === null) { x_59841[x_59841_Idx] = []; }
      var off = x_59841[x_59841_Idx].length;
      x_59841[x_59841_Idx].length += y_59842.length;
      for (var i = 0; i < y_59842.length; ++i) {
        x_59841[x_59841_Idx][off+i] = y_59842.charCodeAt(i);
      }
    

  
}

function aux_write_stack_trace_62151(f_62153) {
          var Tmp3;

  var result_62154 = [null];

    var it_62162 = f_62153;
    var i_62164 = 0;
    var total_62166 = 0;
    var temp_frames_62173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI62156);
    L1: do {
        L2: while (true) {
          if (!!((it_62162 == null))) Tmp3 = false; else {            Tmp3 = (i_62164 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_62173[i_62164].Field0 = it_62162.procname;
          temp_frames_62173[i_62164].Field1 = it_62162.line;
          i_62164 += 1;
          total_62166 += 1;
          it_62162 = it_62162.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_62162 == null))) break L5;
          total_62166 += 1;
          it_62162 = it_62162.prev;
        }
    } while(false);
    result_62154[0] = nimCopy(null, [], NTI43040);
    if (!((total_62166 == i_62164))) {
    if (result_62154[0] != null) { result_62154[0] = (result_62154[0]).concat(makeNimstrLit("(")); } else { result_62154[0] = makeNimstrLit("("); };
    if (result_62154[0] != null) { result_62154[0] = (result_62154[0]).concat(cstrToNimstr(((total_62166 - i_62164))+"")); } else { result_62154[0] = cstrToNimstr(((total_62166 - i_62164))+"").slice(); };
    if (result_62154[0] != null) { result_62154[0] = (result_62154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_62154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_62421 = 0;
      var colontmp__197462 = 0;
      colontmp__197462 = (i_62164 - 1);
      var res_197467 = colontmp__197462;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_197467)) break L8;
            j_62421 = res_197467;
            add_59838(result_62154, 0, temp_frames_62173[j_62421].Field0);
            if ((0 < temp_frames_62173[j_62421].Field1)) {
            if (result_62154[0] != null) { result_62154[0] = (result_62154[0]).concat(makeNimstrLit(", line: ")); } else { result_62154[0] = makeNimstrLit(", line: "); };
            if (result_62154[0] != null) { result_62154[0] = (result_62154[0]).concat(cstrToNimstr((temp_frames_62173[j_62421].Field1)+"")); } else { result_62154[0] = cstrToNimstr((temp_frames_62173[j_62421].Field1)+"").slice(); };
            }
            
            if (result_62154[0] != null) { result_62154[0] = (result_62154[0]).concat(makeNimstrLit("\x0A")); } else { result_62154[0] = makeNimstrLit("\x0A"); };
            res_197467 -= 1;
          }
      } while(false);
    } while(false);

  return result_62154[0];

}

function raw_write_stack_trace_62481() {
  var result_62483 = null;

    if (!((framePtr == null))) {
    result_62483 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_62151(framePtr) || []), NTI43040);
    }
    else {
      result_62483 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI43040);
    }
    

  return result_62483;

}

function new_seq_64336(len_64339) {
  var result_64341 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 984;
    result_64341 = new Array(len_64339); for (var i=0;i<len_64339;++i) {result_64341[i]=null;}  framePtr = F.prev;

  return result_64341;

}

function unhandledException(e_62542) {
    var buf_62543 = [[]];
    if (!(((e_62542.message != null ? e_62542.message.length : 0) == 0))) {
    if (buf_62543[0] != null) { buf_62543[0] = (buf_62543[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_62543[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_62543[0] != null) { buf_62543[0] = (buf_62543[0]).concat(e_62542.message); } else { buf_62543[0] = e_62542.message.slice(); };
    }
    else {
    if (buf_62543[0] != null) { buf_62543[0] = (buf_62543[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_62543[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_62543[0] != null) { buf_62543[0] = (buf_62543[0]).concat(makeNimstrLit(" [")); } else { buf_62543[0] = makeNimstrLit(" ["); };
    add_59838(buf_62543, 0, e_62542.name);
    if (buf_62543[0] != null) { buf_62543[0] = (buf_62543[0]).concat(makeNimstrLit("]\x0A")); } else { buf_62543[0] = makeNimstrLit("]\x0A"); };
    if (buf_62543[0] != null) { buf_62543[0] = (buf_62543[0]).concat(raw_write_stack_trace_62481()); } else { buf_62543[0] = raw_write_stack_trace_62481().slice(); };
    var cbuf_62601 = toJSStr(buf_62543[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_62601);
  }
  else {
    throw cbuf_62601;
  }
  

  
}

function raiseOverflow() {
    var eHEX60gensym63058_63203 = null;
    eHEX60gensym63058_63203 = {m_type: NTI46446, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym63058_63203.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI43040);
    eHEX60gensym63058_63203.parent = null;
    raiseException(eHEX60gensym63058_63203, "OverflowError");

  
}

function is_whitespace_196684(text_196686) {
         return !/[^\s]/.test(text_196686);
  

  
}

function is_whitespace_196701(x_196703) {
    var Tmp1;
    var Tmp2;

  var result_196704 = false;

  var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 134;
    if (!(x_196703.nodeName == "#text")) Tmp2 = false; else {      Tmp2 = is_whitespace_196684(x_196703.textContent);    }    if (Tmp2) Tmp1 = true; else {      Tmp1 = (x_196703.nodeName == "#comment");    }    result_196704 = Tmp1;
  framePtr = F.prev;

  return result_196704;

}

function raiseIndexError(i_63655, a_63656, b_63657) {
    var Tmp1;

    var eHEX60gensym63802_64003 = null;
    eHEX60gensym63802_64003 = {m_type: NTI46458, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    if ((b_63657 < a_63656)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_63655)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_63656)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_63657)+"") || []);
    }
    
    eHEX60gensym63802_64003.message = nimCopy(null, Tmp1, NTI43040);
    eHEX60gensym63802_64003.parent = null;
    raiseException(eHEX60gensym63802_64003, "IndexError");

  
}

function to_toc_196718(x_196720, father_196721) {
                var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
      var Tmp15;

  var F={procname:"dochack.toToc",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    if ((x_196720.nodeName == "UL")) {
    F.line = 139;
    var f_196742 = {heading: null, kids: [], sortId: (father_196721.kids != null ? father_196721.kids.length : 0), doSort: false};
    F.line = 140;
    var i_196744 = 0;
    L1: do {
      F.line = 141;
        L2: while (true) {
        if (!(i_196744 < x_196720.childNodes.length)) break L2;
          F.line = 142;
          var nxt_196745 = addInt(i_196744, 1);
          L3: do {
            F.line = 143;
              L4: while (true) {
                if (!(nxt_196745 < x_196720.childNodes.length)) Tmp5 = false; else {                  Tmp5 = is_whitespace_196701(x_196720.childNodes[nxt_196745]);                }              if (!Tmp5) break L4;
                F.line = 144;
                nxt_196745 = addInt(nxt_196745, 1);
              }
          } while(false);
            if (!(nxt_196745 < x_196720.childNodes.length)) Tmp8 = false; else {              Tmp8 = (x_196720.childNodes[i_196744].nodeName == "LI");            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (x_196720.childNodes[i_196744].childNodes.length == 1);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (x_196720.childNodes[nxt_196745].nodeName == "UL");            }          if (Tmp6) {
          F.line = 147;
          var e_196772 = {heading: x_196720.childNodes[i_196744].childNodes[0], kids: [], sortId: (f_196742.kids != null ? f_196742.kids.length : 0), doSort: false};
          F.line = 148;
          var it_196773 = x_196720.childNodes[nxt_196745];
          L9: do {
            F.line = 149;
            var j_196781 = 0;
            F.line = 2734;
            var colontmp__197442 = 0;
            F.line = 149;
            colontmp__197442 = it_196773.childNodes.length;
            F.line = 2736;
            var i_197443 = 0;
            L10: do {
              F.line = 2737;
                L11: while (true) {
                if (!(i_197443 < colontmp__197442)) break L11;
                  F.line = 149;
                  j_196781 = i_197443;
                  F.line = 150;
                  to_toc_196718(it_196773.childNodes[j_196781], e_196772);
                  F.line = 2739;
                  i_197443 = addInt(i_197443, 1);
                }
            } while(false);
          } while(false);
          F.line = 151;
          if (f_196742.kids != null) { f_196742.kids.push(e_196772); } else { f_196742.kids = [e_196772]; };
          F.line = 152;
          i_196744 = addInt(nxt_196745, 1);
          }
          else {
            F.line = 154;
            to_toc_196718(x_196720.childNodes[i_196744], f_196742);
            F.line = 155;
            i_196744 = addInt(i_196744, 1);
          }
          
        }
    } while(false);
    F.line = 156;
    if (father_196721.kids != null) { father_196721.kids.push(f_196742); } else { father_196721.kids = [f_196742]; };
    }
    else {
    if (is_whitespace_196701(x_196720)) {
    }
    else {
    if ((x_196720.nodeName == "LI")) {
    F.line = 160;
    var idx_196818 = [];
    L12: do {
      F.line = 161;
      var i_196826 = 0;
      F.line = 2734;
      var colontmp__197446 = 0;
      F.line = 161;
      colontmp__197446 = x_196720.childNodes.length;
      F.line = 2736;
      var i_197447 = 0;
      L13: do {
        F.line = 2737;
          L14: while (true) {
          if (!(i_197447 < colontmp__197446)) break L14;
            F.line = 161;
            i_196826 = i_197447;
            if (!(is_whitespace_196701(x_196720.childNodes[i_196826]))) {
            F.line = 162;
            if (idx_196818 != null) { idx_196818.push(i_196826); } else { idx_196818 = [i_196826]; };
            }
            
            F.line = 2739;
            i_197447 = addInt(i_197447, 1);
          }
      } while(false);
    } while(false);
      if (!((idx_196818 != null ? idx_196818.length : 0) == 2)) Tmp15 = false; else {        Tmp15 = (x_196720.childNodes[idx_196818[chckIndx(1, 0, (idx_196818 != null ? idx_196818.length : 0)+0-1)-0]].nodeName == "UL");      }    if (Tmp15) {
    F.line = 164;
    var e_196859 = {heading: x_196720.childNodes[idx_196818[chckIndx(0, 0, (idx_196818 != null ? idx_196818.length : 0)+0-1)-0]], kids: [], sortId: (father_196721.kids != null ? father_196721.kids.length : 0), doSort: false};
    F.line = 166;
    var it_196860 = x_196720.childNodes[idx_196818[chckIndx(1, 0, (idx_196818 != null ? idx_196818.length : 0)+0-1)-0]];
    L16: do {
      F.line = 167;
      var j_196868 = 0;
      F.line = 2734;
      var colontmp__197451 = 0;
      F.line = 167;
      colontmp__197451 = it_196860.childNodes.length;
      F.line = 2736;
      var i_197452 = 0;
      L17: do {
        F.line = 2737;
          L18: while (true) {
          if (!(i_197452 < colontmp__197451)) break L18;
            F.line = 167;
            j_196868 = i_197452;
            F.line = 168;
            to_toc_196718(it_196860.childNodes[j_196868], e_196859);
            F.line = 2739;
            i_197452 = addInt(i_197452, 1);
          }
      } while(false);
    } while(false);
    F.line = 169;
    if (father_196721.kids != null) { father_196721.kids.push(e_196859); } else { father_196721.kids = [e_196859]; };
    }
    else {
      L19: do {
        F.line = 171;
        var i_196883 = 0;
        F.line = 2734;
        var colontmp__197455 = 0;
        F.line = 171;
        colontmp__197455 = x_196720.childNodes.length;
        F.line = 2736;
        var i_197456 = 0;
        L20: do {
          F.line = 2737;
            L21: while (true) {
            if (!(i_197456 < colontmp__197455)) break L21;
              F.line = 171;
              i_196883 = i_197456;
              F.line = 172;
              to_toc_196718(x_196720.childNodes[i_196883], father_196721);
              F.line = 2739;
              i_197456 = addInt(i_197456, 1);
            }
        } while(false);
      } while(false);
    }
    
    }
    else {
      F.line = 174;
    if (father_196721.kids != null) { father_196721.kids.push({heading: x_196720, kids: [], sortId: (father_196721.kids != null ? father_196721.kids.length : 0), doSort: false}); } else { father_196721.kids = [{heading: x_196720, kids: [], sortId: (father_196721.kids != null ? father_196721.kids.length : 0), doSort: false}]; };
    }
    }}
  framePtr = F.prev;

  
}

function extract_items_196339(x_196341, heading_196342, items_196345, items_196345_Idx) {
      var Tmp1;

  var F={procname:"dochack.extractItems",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((x_196341 == null)) {
    F.line = 81;
    break BeforeRet;
    }
    
      if (!!((x_196341.heading == null))) Tmp1 = false; else {        Tmp1 = (x_196341.heading.textContent == heading_196342);      }    if (Tmp1) {
    L2: do {
      F.line = 83;
      var i_196374 = 0;
      F.line = 2734;
      var colontmp__197483 = 0;
      F.line = 83;
      colontmp__197483 = (x_196341.kids != null ? x_196341.kids.length : 0);
      F.line = 2736;
      var i_197484 = 0;
      L3: do {
        F.line = 2737;
          L4: while (true) {
          if (!(i_197484 < colontmp__197483)) break L4;
            F.line = 83;
            i_196374 = i_197484;
            F.line = 84;
            if (items_196345[items_196345_Idx] != null) { items_196345[items_196345_Idx].push(x_196341.kids[chckIndx(i_196374, 0, (x_196341.kids != null ? x_196341.kids.length : 0)+0-1)-0].heading); } else { items_196345[items_196345_Idx] = [x_196341.kids[chckIndx(i_196374, 0, (x_196341.kids != null ? x_196341.kids.length : 0)+0-1)-0].heading]; };
            F.line = 2739;
            i_197484 = addInt(i_197484, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      L5: do {
        F.line = 86;
        var i_196394 = 0;
        F.line = 2734;
        var colontmp__197487 = 0;
        F.line = 86;
        colontmp__197487 = (x_196341.kids != null ? x_196341.kids.length : 0);
        F.line = 2736;
        var i_197488 = 0;
        L6: do {
          F.line = 2737;
            L7: while (true) {
            if (!(i_197488 < colontmp__197487)) break L7;
              F.line = 86;
              i_196394 = i_197488;
              F.line = 87;
              var it_196395 = x_196341.kids[chckIndx(i_196394, 0, (x_196341.kids != null ? x_196341.kids.length : 0)+0-1)-0];
              F.line = 88;
              extract_items_196339(it_196395, heading_196342, items_196345, items_196345_Idx);
              F.line = 2739;
              i_197488 = addInt(i_197488, 1);
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}

function tree_196020(tag_196022, kids_196024) {
  var result_196025 = null;

  var F={procname:"dochack.tree",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 11;
    result_196025 = document.createElement(toJSStr(tag_196022));
    L1: do {
      F.line = 12;
      var k_196056 = null;
      F.line = 3;
      var i_197504 = 0;
      L2: do {
        F.line = 4;
          L3: while (true) {
          if (!(i_197504 < (kids_196024 != null ? kids_196024.length : 0))) break L3;
            F.line = 12;
            k_196056 = kids_196024[chckIndx(i_197504, 0, (kids_196024 != null ? kids_196024.length : 0)+0-1)-0];
            F.line = 13;
            result_196025.appendChild(k_196056);
            F.line = 6;
            i_197504 = addInt(i_197504, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_196025;

}

function text_196152(s_196154) {
  var result_196155 = null;

  var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_196155 = document.createTextNode(s_196154);
  framePtr = F.prev;

  return result_196155;

}

function sys_fatal_56462(message_56466) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 34;
    var e_56603 = null;
    F.line = 37;
    e_56603 = {m_type: NTI46450, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    F.line = 38;
    e_56603.message = nimCopy(null, message_56466, NTI43040);
    F.line = 39;
    raiseException(e_56603, "AssertionError");
  framePtr = F.prev;

  
}

function raise_assert_56458(msg_56460) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 20;
    sys_fatal_56462(msg_56460);
  framePtr = F.prev;

  
}

function failed_assert_impl_56666(msg_56668) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 27;
    raise_assert_56458(msg_56668);
  framePtr = F.prev;

  
}

function uncovered_196995(x_196997) {
      var Tmp1;
    var Tmp2;

  var result_196998 = null;

  var F={procname:"dochack.uncovered",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!((x_196997.kids != null ? x_196997.kids.length : 0) == 0)) Tmp1 = false; else {        Tmp1 = !((x_196997.heading == null));      }    if (Tmp1) {
    F.line = 194;
    if (!(x_196997.heading.hasOwnProperty('__karaxMarker__'))) {
    Tmp2 = x_196997;
    }
    else {
    Tmp2 = null;
    }
    
    result_196998 = Tmp2;
    break BeforeRet;
    }
    
    F.line = 195;
    result_196998 = {heading: x_196997.heading, kids: [], sortId: x_196997.sortId, doSort: x_196997.doSort};
    L3: do {
      F.line = 197;
      var i_197039 = 0;
      F.line = 2734;
      var colontmp__197515 = 0;
      F.line = 197;
      colontmp__197515 = (x_196997.kids != null ? x_196997.kids.length : 0);
      F.line = 2736;
      var i_197516 = 0;
      L4: do {
        F.line = 2737;
          L5: while (true) {
          if (!(i_197516 < colontmp__197515)) break L5;
            F.line = 197;
            i_197039 = i_197516;
            F.line = 198;
            var y_197040 = uncovered_196995(x_196997.kids[chckIndx(i_197039, 0, (x_196997.kids != null ? x_196997.kids.length : 0)+0-1)-0]);
            if (!((y_197040 == null))) {
            F.line = 199;
            if (result_196998.kids != null) { result_196998.kids.push(y_197040); } else { result_196998.kids = [y_197040]; };
            }
            
            F.line = 2739;
            i_197516 = addInt(i_197516, 1);
          }
      } while(false);
    } while(false);
    if (((result_196998.kids != null ? result_196998.kids.length : 0) == 0)) {
    F.line = 200;
    result_196998 = null;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_196998;

}

function merge_tocs_197074(orig_197076, news_197077) {
  var result_197078 = null;

  var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 203;
    result_197078 = uncovered_196995(orig_197076);
    if ((result_197078 == null)) {
    F.line = 205;
    result_197078 = news_197077;
    }
    else {
      L1: do {
        F.line = 207;
        var i_197099 = 0;
        F.line = 2734;
        var colontmp__197510 = 0;
        F.line = 207;
        colontmp__197510 = (news_197077.kids != null ? news_197077.kids.length : 0);
        F.line = 2736;
        var i_197511 = 0;
        L2: do {
          F.line = 2737;
            L3: while (true) {
            if (!(i_197511 < colontmp__197510)) break L3;
              F.line = 207;
              i_197099 = i_197511;
              F.line = 208;
              if (result_197078.kids != null) { result_197078.kids.push(news_197077.kids[chckIndx(i_197099, 0, (news_197077.kids != null ? news_197077.kids.length : 0)+0-1)-0]); } else { result_197078.kids = [news_197077.kids[chckIndx(i_197099, 0, (news_197077.kids != null ? news_197077.kids.length : 0)+0-1)-0]]; };
              F.line = 2739;
              i_197511 = addInt(i_197511, 1);
            }
        } while(false);
      } while(false);
    }
    
  framePtr = F.prev;

  return result_197078;

}

function build_toc_197120(orig_197122, types_197124, procs_197125) {
  var result_197126 = null;

  var F={procname:"dochack.buildToc",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 211;
    var new_stuff_197142 = {heading: null, kids: [], doSort: true, sortId: 0};
    L1: do {
      F.line = 212;
      var t_197214 = null;
      F.line = 184;
      var i_197499 = 0;
      F.line = 185;
      var l_197500 = (types_197124 != null ? types_197124.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_197499 < l_197500)) break L3;
            F.line = 212;
            t_197214 = types_197124[chckIndx(i_197499, 0, (types_197124 != null ? types_197124.length : 0)+0-1)-0];
            F.line = 213;
            var c_197230 = {heading: t_197214.cloneNode(true), kids: [], doSort: true, sortId: 0};
            F.line = 214;
            t_197214.__karaxMarker__ = true;
            L4: do {
              F.line = 215;
              var p_197237 = null;
              F.line = 184;
              var i_197496 = 0;
              F.line = 185;
              var l_197497 = (procs_197125 != null ? procs_197125.length : 0);
              L5: do {
                F.line = 186;
                  L6: while (true) {
                  if (!(i_197496 < l_197497)) break L6;
                    F.line = 215;
                    p_197237 = procs_197125[chckIndx(i_197496, 0, (procs_197125 != null ? procs_197125.length : 0)+0-1)-0];
                    if (!(p_197237.hasOwnProperty('__karaxMarker__'))) {
                    F.line = 217;
                    var xx_197238 = p_197237.parentNode.getElementsByClassName("attachedType");
                    if ((((xx_197238 != null ? xx_197238.length : 0) == 1) && (xx_197238[chckIndx(0, 0, (xx_197238 != null ? xx_197238.length : 0)+0-1)-0].textContent == t_197214.textContent))) {
                    F.line = 220;
                    var q_197246 = tree_196020(makeNimstrLit("A"), [text_196152(p_197237.title)]);
                    F.line = 221;
                    q_197246.setAttribute("href", p_197237.getAttribute("href"));
                    F.line = 222;
                    if (c_197230.kids != null) { c_197230.kids.push({heading: q_197246, kids: [], sortId: 0, doSort: false}); } else { c_197230.kids = [{heading: q_197246, kids: [], sortId: 0, doSort: false}]; };
                    F.line = 223;
                    p_197237.__karaxMarker__ = true;
                    }
                    
                    }
                    
                    F.line = 188;
                    i_197496 = addInt(i_197496, 1);
                    if (!(((procs_197125 != null ? procs_197125.length : 0) == l_197497))) {
                    F.line = 189;
                    failed_assert_impl_56666(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(189, 11) `len(a) ==\x0A    L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
            F.line = 224;
            if (new_stuff_197142.kids != null) { new_stuff_197142.kids.push(c_197230); } else { new_stuff_197142.kids = [c_197230]; };
            F.line = 188;
            i_197499 = addInt(i_197499, 1);
            if (!(((types_197124 != null ? types_197124.length : 0) == l_197500))) {
            F.line = 189;
            failed_assert_impl_56666(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(189, 11) `len(a) ==\x0A    L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 225;
    result_197126 = merge_tocs_197074(orig_197122, new_stuff_197142);
  framePtr = F.prev;

  return result_197126;

}

function add_196085(parent_196087, kid_196088) {
      var Tmp1;
        var Tmp2;

  var F={procname:"dochack.add",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
      if (!(parent_196087.nodeName == "TR")) Tmp1 = false; else {        if ((kid_196088.nodeName == "TD")) Tmp2 = true; else {          Tmp2 = (kid_196088.nodeName == "TH");        }        Tmp1 = Tmp2;      }    if (Tmp1) {
    F.line = 18;
    var k_196089 = document.createElement("TD");
    F.line = 19;
    k_196089.appendChild(kid_196088);
    F.line = 20;
    parent_196087.appendChild(k_196089);
    }
    else {
      F.line = 22;
    parent_196087.appendChild(kid_196088);
    }
    
  framePtr = F.prev;

  
}

function set_class_196103(e_196105, value_196106) {
  var F={procname:"dochack.setClass",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 25;
    e_196105.setAttribute("class", toJSStr(value_196106));
  framePtr = F.prev;

  
}

function to_html_196424(x_196426, is_root_196427) {
      var Tmp1;

    function HEX3Aanonymous_196467(a_196469, b_196470) {
          var Tmp1;

      var result_196471 = 0;

      var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
      framePtr = F;
      BeforeRet: do {
          if (!!((a_196469.heading == null))) Tmp1 = false; else {            Tmp1 = !((b_196470.heading == null));          }        if (Tmp1) {
        F.line = 106;
        var x_196488 = a_196469.heading.textContent;
        F.line = 107;
        var y_196489 = b_196470.heading.textContent;
        if ((x_196488 < y_196489)) {
        F.line = 108;
        result_196471 = -1;
        break BeforeRet;
        }
        
        if ((y_196489 < x_196488)) {
        F.line = 109;
        result_196471 = 1;
        break BeforeRet;
        }
        
        F.line = 110;
        result_196471 = 0;
        break BeforeRet;
        }
        else {
          F.line = 113;
          result_196471 = subInt(a_196469.sortId, b_196470.sortId);
          break BeforeRet;
        }
        
      } while (false);
      framePtr = F.prev;

      return result_196471;

    }

  var result_196428 = null;

  var F={procname:"dochack.toHtml",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((x_196426 == null)) {
    F.line = 91;
    result_196428 = null;
    break BeforeRet;
    }
    
    if (((x_196426.kids != null ? x_196426.kids.length : 0) == 0)) {
    if ((x_196426.heading == null)) {
    F.line = 93;
    result_196428 = null;
    break BeforeRet;
    }
    
    F.line = 94;
    result_196428 = x_196426.heading.cloneNode(true);
    break BeforeRet;
    }
    
    F.line = 95;
    result_196428 = tree_196020(makeNimstrLit("DIV"), []);
      if (!!((x_196426.heading == null))) Tmp1 = false; else {        Tmp1 = !(x_196426.heading.hasOwnProperty('__karaxMarker__'));      }    if (Tmp1) {
    F.line = 97;
    add_196085(result_196428, x_196426.heading.cloneNode(true));
    }
    
    F.line = 98;
    var ul_196464 = tree_196020(makeNimstrLit("UL"), []);
    if (is_root_196427) {
    F.line = 100;
    set_class_196103(ul_196464, makeNimstrLit("simple simple-toc"));
    }
    else {
      F.line = 102;
    set_class_196103(ul_196464, makeNimstrLit("simple"));
    }
    
    if (x_196426.doSort) {
    F.line = 104;
    x_196426.kids.sort(HEX3Aanonymous_196467);
    }
    
    L2: do {
      F.line = 115;
      var k_196614 = null;
      F.line = 182;
      var colontmp__197521 = null;
      F.line = 115;
      colontmp__197521 = x_196426.kids;
      F.line = 184;
      var i_197523 = 0;
      F.line = 185;
      var l_197524 = (colontmp__197521 != null ? colontmp__197521.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_197523 < l_197524)) break L4;
            F.line = 115;
            k_196614 = colontmp__197521[chckIndx(i_197523, 0, (colontmp__197521 != null ? colontmp__197521.length : 0)+0-1)-0];
            F.line = 116;
            var y_196615 = to_html_196424(k_196614, false);
            if (!((y_196615 == null))) {
            F.line = 118;
            add_196085(ul_196464, tree_196020(makeNimstrLit("LI"), [y_196615]));
            }
            
            F.line = 188;
            i_197523 = addInt(i_197523, 1);
            if (!(((colontmp__197521 != null ? colontmp__197521.length : 0) == l_197524))) {
            F.line = 189;
            failed_assert_impl_56666(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(189, 11) `len(a) ==\x0A    L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    if (!((ul_196464.childNodes.length == 0))) {
    F.line = 119;
    add_196085(result_196428, ul_196464);
    }
    
    if ((result_196428.childNodes.length == 0)) {
    F.line = 120;
    result_196428 = null;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_196428;

}

function replace_by_id_196172(id_196174, new_tree_196175) {
  var F={procname:"dochack.replaceById",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 32;
    var x_196176 = document.getElementById(id_196174);
    F.line = 33;
    x_196176.parentNode.replaceChild(new_tree_196175, x_196176);
    F.line = 34;
    new_tree_196175.id = id_196174;
  framePtr = F.prev;

  
}

function togglevis_197333(d_197335) {
  var F={procname:"dochack.togglevis",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 230;
        if (d_197335.style.display == 'none')
      d_197335.style.display = 'inline';
    else
      d_197335.style.display = 'none';
  
  framePtr = F.prev;

  
}

function groupBy(value_197351) {
  var F={procname:"dochack.groupBy",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 238;
    var toc_197352 = document.getElementById("toc-list");
    if ((alternative_197319[0] == null)) {
    F.line = 240;
    var tt_197373 = {heading: null, kids: [], sortId: 0, doSort: false};
    F.line = 241;
    to_toc_196718(toc_197352, tt_197373);
    F.line = 242;
    tt_197373 = tt_197373.kids[chckIndx(0, 0, (tt_197373.kids != null ? tt_197373.kids.length : 0)+0-1)-0];
    F.line = 244;
    var types_197390 = [[]];
    F.line = 245;
    var procs_197407 = [[]];
    F.line = 247;
    extract_items_196339(tt_197373, "Types", types_197390, 0);
    F.line = 248;
    extract_items_196339(tt_197373, "Procs", procs_197407, 0);
    F.line = 249;
    extract_items_196339(tt_197373, "Converters", procs_197407, 0);
    F.line = 250;
    extract_items_196339(tt_197373, "Methods", procs_197407, 0);
    F.line = 251;
    extract_items_196339(tt_197373, "Templates", procs_197407, 0);
    F.line = 252;
    extract_items_196339(tt_197373, "Macros", procs_197407, 0);
    F.line = 253;
    extract_items_196339(tt_197373, "Iterators", procs_197407, 0);
    F.line = 255;
    var ntoc_197415 = build_toc_197120(tt_197373, types_197390[0], procs_197407[0]);
    F.line = 256;
    var x_197416 = to_html_196424(ntoc_197415, true);
    F.line = 257;
    alternative_197319[0] = tree_196020(makeNimstrLit("DIV"), [x_197416]);
    }
    
    if ((value_197351 == "type")) {
    F.line = 259;
    replace_by_id_196172("tocRoot", alternative_197319[0]);
    }
    else {
      F.line = 261;
    replace_by_id_196172("tocRoot", tree_196020(makeNimstrLit("DIV"), []));
    }
    
    F.line = 262;
    togglevis_197333(document.getElementById("toc-list"));
  framePtr = F.prev;

  
}
var db_197527 = [null];
var contents_197529 = [null];
var oldtoc_197961 = [null];
var timer_197962 = [null];

function raiseRangeError() {
    var eHEX60gensym63457_63603 = null;
    eHEX60gensym63457_63603 = {m_type: NTI46462, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym63457_63603.message = nimCopy(null, makeNimstrLit("value out of range"), NTI43040);
    eHEX60gensym63457_63603.parent = null;
    raiseException(eHEX60gensym63457_63603, "RangeError");

  
}

function nsuToLowerAsciiChar(c_185184) {
  var result_185185 = 0;

  var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    if ((ConstSet2[c_185184] != undefined)) {
    F.line = 209;
    result_185185 = chckRange(addInt(c_185184, 32), 0, 255);
    }
    else {
      F.line = 211;
      result_185185 = c_185184;
    }
    
  framePtr = F.prev;

  return result_185185;

}

function fuzzy_match_195054(pattern_195056, str_195057) {
              var Tmp4;
              var Tmp5;
                var Tmp6;

  var result_195061 = {Field0: 0, Field1: false};

  var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"fuzzysearch.nim",line:0};
  framePtr = F;
    F.line = 36;
    var score_state_195062 = -100;
    F.line = 37;
    var header_matched_195063 = false;
    F.line = 38;
    var unmatched_leading_char_count_195065 = 0;
    F.line = 39;
    var consecutive_match_count_195067 = 0;
    F.line = 40;
    var str_index_195069 = 0;
    F.line = 41;
    var pat_index_195071 = 0;
    F.line = 42;
    var score_195073 = 0;
    L1: do {
      F.line = 48;
        L2: while (true) {
        if (!((str_index_195069 < (str_195057 != null ? str_195057.length : 0)) && (pat_index_195071 < (pattern_195056 != null ? pattern_195056.length : 0)))) break L2;
          L3: do {
            F.line = 50;
            var pattern_char_195079 = nsuToLowerAsciiChar(pattern_195056.charCodeAt(chckIndx(pat_index_195071, 0, (pattern_195056 != null ? pattern_195056.length : 0)+0-1)-0));
            F.line = 51;
            var str_char_195080 = nsuToLowerAsciiChar(str_195057.charCodeAt(chckIndx(str_index_195069, 0, (str_195057 != null ? str_195057.length : 0)+0-1)-0));
            if ((ConstSet3[pattern_char_195079] != undefined)) {
            F.line = 55;
            pat_index_195071 = addInt(pat_index_195071, 1);
            F.line = 56;
            break L3;
            }
            
            if ((ConstSet4[str_char_195080] != undefined)) {
            F.line = 58;
            str_index_195069 = addInt(str_index_195069, 1);
            F.line = 59;
            break L3;
            }
            
            if ((!(header_matched_195063) && (str_char_195080 == 58))) {
            F.line = 64;
            header_matched_195063 = true;
            F.line = 65;
            score_state_195062 = -100;
            F.line = 66;
            score_195073 = ((Math.floor((5.0000000000000000e-01 * score_195073)))|0);
            F.line = 67;
            pat_index_195071 = 0;
            F.line = 68;
            str_index_195069 = addInt(str_index_195069, 1);
            F.line = 69;
            break L3;
            }
            
            if ((str_char_195080 == pattern_char_195079)) {
            F.line = 72;
            switch (score_state_195062) {
            case -100:
            case 20:
              F.line = 74;
              score_state_195062 = 10;
              break;
            case 0:
              F.line = 77;
              score_state_195062 = 5;
              F.line = 77;
              score_195073 = addInt(score_195073, score_state_195062);
              break;
            case 10:
            case 5:
              F.line = 80;
              consecutive_match_count_195067 = addInt(consecutive_match_count_195067, 1);
              F.line = 81;
              score_state_195062 = 5;
              F.line = 82;
              score_195073 = addInt(score_195073, mulInt(5, consecutive_match_count_195067));
              if ((score_state_195062 == 10)) {
              F.line = 85;
              score_195073 = addInt(score_195073, 10);
              }
              
              F.line = 87;
              var on_boundary_195154 = (pat_index_195071 == (pattern_195056 != null ? (pattern_195056.length-1) : -1));
              if ((!(on_boundary_195154) && (str_index_195069 < (str_195057 != null ? (str_195057.length-1) : -1)))) {
              F.line = 90;
              var next_pattern_char_195155 = nsuToLowerAsciiChar(pattern_195056.charCodeAt(chckIndx(addInt(pat_index_195071, 1), 0, (pattern_195056 != null ? pattern_195056.length : 0)+0-1)-0));
              F.line = 91;
              var next_str_char_195156 = nsuToLowerAsciiChar(str_195057.charCodeAt(chckIndx(addInt(str_index_195069, 1), 0, (str_195057 != null ? str_195057.length : 0)+0-1)-0));
              F.line = 94;
              if (!!((ConstSet5[next_str_char_195156] != undefined))) Tmp4 = false; else {                Tmp4 = !((next_str_char_195156 == next_pattern_char_195155));              }              on_boundary_195154 = Tmp4;
              }
              
              if (on_boundary_195154) {
              F.line = 99;
              score_state_195062 = 20;
              F.line = 99;
              score_195073 = addInt(score_195073, score_state_195062);
              }
              
              break;
            case -1:
            case -3:
              F.line = 102;
              if (!((ConstSet6[str_195057.charCodeAt(chckIndx(subInt(str_index_195069, 1), 0, (str_195057 != null ? str_195057.length : 0)+0-1)-0)] != undefined))) Tmp5 = true; else {                if (!(ConstSet7[str_195057.charCodeAt(chckIndx(subInt(str_index_195069, 1), 0, (str_195057 != null ? str_195057.length : 0)+0-1)-0)] != undefined)) Tmp6 = false; else {                  Tmp6 = (ConstSet8[str_195057.charCodeAt(chckIndx(str_index_195069, 0, (str_195057 != null ? str_195057.length : 0)+0-1)-0)] != undefined);                }                Tmp5 = Tmp6;              }              var is_leading_char_195194 = Tmp5;
              if (is_leading_char_195194) {
              F.line = 109;
              score_state_195062 = 10;
              }
              else {
                F.line = 113;
                score_state_195062 = 0;
                F.line = 113;
                score_195073 = addInt(score_195073, score_state_195062);
              }
              
              break;
            }
            F.line = 114;
            pat_index_195071 = addInt(pat_index_195071, 1);
            }
            else {
              F.line = 117;
              switch (score_state_195062) {
              case -100:
                F.line = 119;
                score_state_195062 = -3;
                F.line = 119;
                score_195073 = addInt(score_195073, score_state_195062);
                break;
              case 5:
                F.line = 122;
                score_state_195062 = -1;
                F.line = 122;
                score_195073 = addInt(score_195073, score_state_195062);
                F.line = 123;
                consecutive_match_count_195067 = 0;
                break;
              case -3:
                if ((unmatched_leading_char_count_195065 < 3)) {
                F.line = 127;
                score_state_195062 = -3;
                F.line = 127;
                score_195073 = addInt(score_195073, score_state_195062);
                }
                
                F.line = 128;
                unmatched_leading_char_count_195065 = addInt(unmatched_leading_char_count_195065, 1);
                break;
              default: 
                F.line = 131;
                score_state_195062 = -1;
                F.line = 131;
                score_195073 = addInt(score_195073, score_state_195062);
                break;
              }
            }
            
            F.line = 133;
            str_index_195069 = addInt(str_index_195069, 1);
          } while(false);
        }
    } while(false);
    F.line = 136;
    var colontmp__198065 = nimMax(0, score_195073);
    F.line = 137;
    var colontmp__198066 = (0 < score_195073);
    F.line = 135;
    nimCopy(result_195061, {Field0: colontmp__198065, Field1: colontmp__198066}, NTI195058);
  framePtr = F.prev;

  return result_195061;

}

function text_196120(s_196122) {
  var result_196123 = null;

  var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 26;
    result_196123 = document.createTextNode(toJSStr(s_196122));
  framePtr = F.prev;

  return result_196123;

}

function dosearch_197546(value_197548) {

    function HEX3Aanonymous_197873(a_197882, b_197883) {
      var result_197887 = 0;

      var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
      framePtr = F;
        F.line = 305;
        result_197887 = subInt(b_197883["Field1"], a_197882["Field1"]);
      framePtr = F.prev;

      return result_197887;

    }

  var result_197549 = null;

  var F={procname:"dochack.dosearch",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    if (((db_197527[0] != null ? db_197527[0].length : 0) == 0)) {
    F.line = 272;
    var stuff_197555 = null;
    F.line = 273;
        var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_197555 = doc.documentElement;
    
    F.line = 286;
    db_197527[0] = nimCopy(null, stuff_197555.getElementsByClassName("reference"), NTI85305);
    F.line = 287;
    contents_197529[0] = nimCopy(null, [], NTI197570);
    L1: do {
      F.line = 288;
      var ahref_197814 = null;
      F.line = 184;
      var i_198045 = 0;
      F.line = 185;
      var l_198046 = (db_197527[0] != null ? db_197527[0].length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_198045 < l_198046)) break L3;
            F.line = 288;
            ahref_197814 = db_197527[0][chckIndx(i_198045, 0, (db_197527[0] != null ? db_197527[0].length : 0)+0-1)-0];
            F.line = 289;
            if (contents_197529[0] != null) { contents_197529[0].push(ahref_197814.getAttribute("data-doc-search-tag")); } else { contents_197529[0] = [ahref_197814.getAttribute("data-doc-search-tag")]; };
            F.line = 188;
            i_198045 = addInt(i_198045, 1);
            if (!(((db_197527[0] != null ? db_197527[0].length : 0) == l_198046))) {
            F.line = 189;
            failed_assert_impl_56666(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(189, 11) `len(a) ==\x0A    L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    }
    
    F.line = 290;
    var ul_197825 = tree_196020(makeNimstrLit("UL"), []);
    F.line = 291;
    result_197549 = tree_196020(makeNimstrLit("DIV"), []);
    F.line = 292;
    set_class_196103(result_197549, makeNimstrLit("search_results"));
    F.line = 293;
    var matches_197846 = [];
    L4: do {
      F.line = 294;
      var i_197859 = 0;
      F.line = 2734;
      var colontmp__198052 = 0;
      F.line = 294;
      colontmp__198052 = (db_197527[0] != null ? db_197527[0].length : 0);
      F.line = 2736;
      var i_198053 = 0;
      L5: do {
        F.line = 2737;
          L6: while (true) {
          if (!(i_198053 < colontmp__198052)) break L6;
            F.line = 294;
            i_197859 = i_198053;
            L7: do {
              F.line = 295;
              var c_197860 = contents_197529[0][chckIndx(i_197859, 0, (contents_197529[0] != null ? contents_197529[0].length : 0)+0-1)-0];
              if (((c_197860 == "Examples") || (c_197860 == "PEG construction"))) {
              F.line = 300;
              break L7;
              }
              
              F.line = 301;
              var colontmp__198060 = {Field0: 0, Field1: false};
              F.line = 301;
              var score_197861 = 0;
              F.line = 301;
              var matched_197862 = false;
              F.line = 301;
              nimCopy(colontmp__198060, fuzzy_match_195054(value_197548, c_197860), NTI195058);
              F.line = 301;
              score_197861 = colontmp__198060["Field0"];
              F.line = 301;
              matched_197862 = colontmp__198060["Field1"];
              if (matched_197862) {
              F.line = 303;
              if (matches_197846 != null) { matches_197846.push({Field0: db_197527[0][chckIndx(i_197859, 0, (db_197527[0] != null ? db_197527[0].length : 0)+0-1)-0], Field1: score_197861}); } else { matches_197846 = [{Field0: db_197527[0][chckIndx(i_197859, 0, (db_197527[0] != null ? db_197527[0].length : 0)+0-1)-0], Field1: score_197861}]; };
              }
              
            } while(false);
            F.line = 2739;
            i_198053 = addInt(i_198053, 1);
          }
      } while(false);
    } while(false);
    F.line = 305;
    matches_197846.sort(HEX3Aanonymous_197873);
    L8: do {
      F.line = 306;
      var i_197926 = 0;
      F.line = 2734;
      var colontmp__198057 = 0;
      F.line = 306;
      colontmp__198057 = nimMin((matches_197846 != null ? matches_197846.length : 0), 19);
      F.line = 2736;
      var i_198058 = 0;
      L9: do {
        F.line = 2737;
          L10: while (true) {
          if (!(i_198058 < colontmp__198057)) break L10;
            F.line = 306;
            i_197926 = i_198058;
            F.line = 307;
            matches_197846[chckIndx(i_197926, 0, (matches_197846 != null ? matches_197846.length : 0)+0-1)-0]["Field0"].innerHTML = matches_197846[chckIndx(i_197926, 0, (matches_197846 != null ? matches_197846.length : 0)+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
            F.line = 308;
            add_196085(ul_197825, tree_196020(makeNimstrLit("LI"), [matches_197846[chckIndx(i_197926, 0, (matches_197846 != null ? matches_197846.length : 0)+0-1)-0]["Field0"]]));
            F.line = 2739;
            i_198058 = addInt(i_198058, 1);
          }
      } while(false);
    } while(false);
    if ((ul_197825.childNodes.length == 0)) {
    F.line = 310;
    add_196085(result_197549, tree_196020(makeNimstrLit("B"), [text_196120(makeNimstrLit("no search results"))]));
    }
    else {
      F.line = 312;
      add_196085(result_197549, tree_196020(makeNimstrLit("B"), [text_196120(makeNimstrLit("search results"))]));
      F.line = 313;
      add_196085(result_197549, ul_197825);
    }
    
  framePtr = F.prev;

  return result_197549;

}

function search() {

    function wrapper_197993() {
      var F={procname:"search.wrapper",prev:framePtr,filename:"dochack.nim",line:0};
      framePtr = F;
        F.line = 320;
        var elem_197995 = document.getElementById("searchInput");
        F.line = 321;
        var value_197996 = elem_197995.value;
        if (!(((value_197996 != null ? value_197996.length : 0) == 0))) {
        if ((oldtoc_197961[0] == null)) {
        F.line = 324;
        oldtoc_197961[0] = document.getElementById("tocRoot");
        }
        
        F.line = 325;
        var results_198002 = dosearch_197546(value_197996);
        F.line = 326;
        replace_by_id_196172("tocRoot", results_198002);
        }
        else {
        if (!((oldtoc_197961[0] == null))) {
        F.line = 328;
        replace_by_id_196172("tocRoot", oldtoc_197961[0]);
        }
        }
      framePtr = F.prev;

      
    }

  var F={procname:"dochack.search",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    if (!((timer_197962[0] == null))) {
    F.line = 330;
    clearTimeout(timer_197962[0]);
    }
    
    F.line = 331;
    timer_197962[0] = setTimeout(wrapper_197993, 400);
  framePtr = F.prev;

  
}
